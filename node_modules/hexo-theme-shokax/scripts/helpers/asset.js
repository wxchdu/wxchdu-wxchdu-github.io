"use strict";
/* global hexo */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const package_json_1 = __importDefault(require("../../package.json"));
const hexo_util_1 = require("hexo-util");
const utils_1 = require("../utils");
hexo.extend.helper.register('_safedump', (source) => {
    return JSON.stringify(source);
});
hexo.extend.helper.register('hexo_env', function (type) {
    return this.env[type];
});
hexo.extend.helper.register('theme_env', function (type) {
    return package_json_1.default[type];
});
hexo.extend.helper.register('_vendor_font', () => {
    const config = hexo.theme.config.font;
    if (!config || !config.enable)
        return '';
    const fontDisplay = '&display=swap';
    const fontSubset = '&subset=latin,latin-ext';
    const fontStyles = ':400,400italic,700,700italic';
    const fontHost = 'https://fonts.googleapis.com';
    // Get a font list from config
    let fontFamilies = ['global', 'logo', 'title', 'headings', 'posts', 'codes'].map(item => {
        if (config[item] && config[item].family && config[item].external) {
            return config[item].family + fontStyles;
        }
        return '';
    });
    fontFamilies = fontFamilies.filter(item => item !== '');
    // @ts-ignore
    fontFamilies = [...new Set(fontFamilies)];
    // @ts-ignore
    fontFamilies = fontFamilies.join('|');
    // Merge extra parameters to the final processed font string
    return fontFamilies
        ? (0, hexo_util_1.htmlTag)('link', {
            rel: 'stylesheet',
            href: `${fontHost}/css?family=${fontFamilies.concat(fontDisplay, fontSubset)}`,
            media: 'none',
            onload: "this.media='all'"
        })
        : '';
});
hexo.extend.helper.register('_css', function (...urls) {
    const { statics, css } = hexo.theme.config;
    return urls.map(url => (0, hexo_util_1.htmlTag)('link', {
        rel: 'stylesheet',
        href: hexo_util_1.url_for.call(this, `${statics}${css}/${url}?v=${package_json_1.default.version}`)
    }), '').join('');
});
hexo.extend.helper.register('_js', function (...urls) {
    const { statics, js } = hexo.theme.config;
    return urls.map(url => (0, hexo_util_1.htmlTag)('script', { src: hexo_util_1.url_for.call(this, `${statics}${js}/${url}?v=${package_json_1.default.version}`), type: 'module', fetchpriority: 'high', defer: true }, '')).join('');
});
hexo.extend.helper.register('vendor_js', function () {
    const vendors = hexo.theme.config.vendors;
    let res = '';
    for (const jsSync in vendors.js) {
        res += (0, hexo_util_1.htmlTag)('script', { src: (0, utils_1.getVendorLink)(hexo, vendors.js[jsSync]), async: true }, '');
    }
    return res;
});
hexo.extend.helper.register('_striptags', function (data) {
    return (0, hexo_util_1.stripHTML)(data);
});
hexo.extend.helper.register('_truncate', function (data, end) {
    return data.substring(0, end);
});
